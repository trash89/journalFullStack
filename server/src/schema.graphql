# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type Query {
  profile(idProfile: ID!): TProfile
  profiles: [TProfile!]!
  client(idClient: ID!): TClient
  clients: [TClient!]!
  project(idProject: ID!): TProject
  projects: [TProject!]!
  subproject(idSubproject: ID!): TSubproject
  subprojects: [TSubproject!]!
  journal(idJournal: ID!): TJournal
  journals: [TJournal!]!
}

type AuthPayload {
  token: String
  profile: TProfile
}

type Mutation {
  createProfile(
    Username: String!
    Password: String!
    Is_Admin: String!
  ): TProfile!
  login(Username: String!, Password: String!): AuthPayload!
  updateProfile(
    Username: String!
    Password: String!
    Is_Admin: String!
  ): TProfile!
  deleteProfile(idProfile: ID!): TProfile!
}

type TProfile {
  idProfile: ID!
  Username: String!
  Password: String!
  Is_Admin: String!
  client: [TClient!]!
  journal: [TJournal!]
}

type TClient {
  idProfile: ID!
  idClient: ID!
  Name: String!
  Description: String!
  StartDate: String!
  EndDate: String
  profile: TProfile!
  project: [TProject!]!
  journal: [TJournal!]
  subproject: [TSubproject!]
}

type TProject {
  idClient: ID!
  idProject: ID!
  Name: String!
  Description: String!
  isDefault: String!
  StartDate: DateTime
  EndDate: DateTime
  Finished: String!
  client: TClient!
  subproject: [TSubproject!]
  journal: [TJournal!]
}

type TSubproject {
  idProject: ID!
  idClient: ID!
  idSubproject: ID!
  Name: String!
  Description: String!
  isDefault: String!
  StartDate: DateTime!
  EndDate: DateTime
  Finished: String!
  client: TClient!
  project: TProject!
  journal: [TJournal!]
}

type TJournal {
  idProfile: ID!
  idClient: ID!
  idProject: ID!
  idSubproject: ID!
  idJournal: ID!
  createdAt: DateTime
  updatedAt: DateTime
  EntryDate: DateTime
  Description: String!
  Todos: String
  ThingsDone: String
  DocUploaded: ByteArray
  profile: TProfile!
  client: TClient!
  project: TProject!
  subproject: TSubproject!
}

scalar DateTime
scalar ByteArray
